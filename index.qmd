---
title: "Introdução ao ggplot2"
author: "Isadora Real"
bibliography: ref.bib
csl: abnt.csl
lightbox: auto
---

# Introdução

O `ggplot2` é um pacote de código aberto para a visualização gráfica de dados para a linguagem de programação R. Foi criada por Hadley Wickham em 2005 [@ggplot2], sendo uma implementação do livro `Grammar Graphics` de Leland Wilkison também lançado em 2005 [@wilkinson2011grammar].

Ele aborda que visualização gráfica dos dados pode ser divida em componentes semânticos, como escalas e camadas.


![](Ggplot2_hex_logo.svg.png){fig-width=50px, fig-aling="center"}

## Por que usar o ggplot2?

1. Alta costumização gráfica.

2. Alta diversidade de modelos de gráficos.

3. Integração com outros pacotes do tidyverse, como por exemplo `dplyr` [@dplyr], `forcats` [@forcats] e o `plotly`[@plotly].

4. Criação de gráficos a partir de camadas, podendo sobrepor diferentes gráficos.

## Como instalar o ggplot2?

```{r,label="cran"}
options(repos = c(CRAN = "https://cloud.r-project.org"))
```

```{r, label="instalando pacotes"}
#| echo: true
#| message: false
#| warning: false
#| output: false

#instalando pacote ggplot2
install.packages("ggplot2")

#instalando dplyr, forcats e patchwork
install.packages("dplyr")
install.packages("forcats")
install.packages("patchwork")
```

Para usar o `ggplot2` em seus scripts tem que carrega-lo

```{r, label="carregando pacotes"}
#| echo: true
#| message: false
#| warning: false
#| output: false

#Carregando o pacote ggplot2
library(ggplot2)

#Carregando dplyr, forcats e patchwork
library(dplyr)
library(forcats)
library(patchwork)
```

# Banco de dados *iris*

Para essa oficina será utilizado bancos de dados **iris**.

**iris** - é referente tamanho de pételas e sepalas de 3 espécies do gênero *Iris* do trabalho de Fisher em 1936 (*Iris setosa*,*Iris versicolor* e *Iris virginica*)

```{r, label="carregando banco de dados"}
#| echo: true
data(iris)

head(iris)
```

# Box-plot

**Primeiros passos:**

1- escrevemos **iris** - para indicar qual banco de dados estamos trabalhando

2- usamos o simbolo de pipe `%>%` para indicar que função futura vai ser utilizada com esse banco de dados

3- usamos a função `ggplot()` para iniciar a criação de nosso gráfico

4- dentro da função `ggplot()` será inserido a função `aes()`, nela será definido os fatores estéticos (*aesthetic*) do gráfico. Como que variável vai estar no eixo x, eixo y, na cor de preenchimento, etc.

5- é usado o símbolo de "`+`" na sintaxe para acrescentar camadas e alterações no gráfico, como legendas e alteração na escala dos eixos.

6- sempre para gerar alguma forma "geométrica" no gráfico, como colunas, box-plots, curvas, texte, entre outras, será utilizado `geom_"forma geométrica"`, neste caso será utilizado o `geom_boxplot`

```{r,label="Box-plot simples1"}
#| echo: true

iris%>%ggplot(aes(x=Species, y=Petal.Length))+geom_boxplot()

```
**iris poderia estar dentro de ggplot, como o primeiro argumento da função, se a necessidade de usar *pipe* `%>%`, segue o exemplo abaixo **

Obs.: pode se indicar o *data frame* através de `data=iris` dentro da função `ggplot()`

```{r, label="Box-plot simples"}
#| echo: true

ggplot(iris,aes(x=Species, y=Petal.Length))+geom_boxplot()

```

# Gráfico violino

O gráfico violino é graficamente semelhante ao Box-plot, demonstrando a densidade dos dados na formade violino. Para utilizar essa forma é adicnoando a função `geom_violin`

```{r, label="violino"}
ggplot(iris, aes(x=Species,y=Sepal.Width, fill=Species))+geom_violin()

```

# Histograma

Para gerar histogramas iremos utilizar a função `geom_histogram`, e só colocaremos a variável. Há diferentes formas de delimitar o número de classes de um histograma, como por exemplo a regra de Sturges. Após de escolher o método e calcular o número de classes, você insere o número de classes no argumento `bins =`. E caso quera que a escala de eixo x tenha o mesmo número de sepações que o histograma utilizaremos o comando `scale_x_continuous(n.breaks=)`, nesse exemplo colocamos 11 pois delimitamos 11 bins no comando anterior.

```{r, label="histograma"}

ggplot(iris,aes(x=Sepal.Width))+geom_histogram(bins=10, color="black", fill="white")+labs(y="Frequência", x="Largura de Sépala")

ggplot(iris,aes(x=Sepal.Width))+geom_histogram(bins=11, color="black", fill="white")+labs(y="Frequência", x="Largura de Sépala")+scale_x_continuous(n.breaks = 11)

```

# Polígono

O polígono de frequência é semelhante ao histograma, mas neste caso utilizaremos o comando `geom_freqpoly()`.

```{r, label="histograma1"}

ggplot(iris,aes(x=Sepal.Width))+geom_freqpoly(bins=11, color="black")+labs(y="Frequência", x="Largura de Sépala")+scale_x_continuous(n.breaks = 11)

```

No exemplo abaixo note que é possível sobrepor dois gráficos (o polígono de frequência sobre o histograma). Fazendo na seguinte maneira:

1. Colocamos o comando `geom_histogram()`

2. Em seguida colocamos o "`+`" para adicionar a próxima camada

3. Para depois adicionar o gráfico que gostariámos de sobrepor, que neste caso é o polígono de frequência  `geom_freqpoly`.

```{r}
ggplot(iris,aes(x=Sepal.Width))+labs(y="Frequência", x="Largura de Sépala")+scale_x_continuous(n.breaks = 11)+geom_histogram(bins=11, color="black", fill="white")+geom_freqpoly(bins=11, color="blue")
```

Caso queira gerar diferentes histogramas de acordo com uma variável categórica de seu *data frame*, utilizaremos o comando `facet_grid()`. Note que colocamos a variável `Species` antes e depois do `~`, se é colocado antes os gráficos serão divididos pela vertical se for colocado depois será divididos na horizontal.

```{r}
ggplot(iris,aes(x=Sepal.Width))+labs(y="Frequência", x="Largura de Sépala")+scale_x_continuous(n.breaks = 11)+geom_histogram(bins=11, color="black", fill="white")+geom_freqpoly(bins=11, color="blue")+facet_grid(~Species)

ggplot(iris,aes(x=Sepal.Width))+labs(y="Frequência", x="Largura de Sépala")+scale_x_continuous(n.breaks = 11)+geom_histogram(bins=11, color="black", fill="white")+geom_freqpoly(bins=11, color="blue")+facet_grid(Species~.)

```

# Gráfico de densidade

O gráfico de densidade é uma outra forma de ver a distribuição dos dados, através do `geom_density`

```{r}
ggplot(iris,aes(x=Sepal.Width))+geom_density(color="black", fill="white")+labs(y="Frequência", x="Largura de Sépala")


```



# Gráfico de barras de frequência

Para realizar esse gráfico se utiliza o `geom_bar`, essa função sem argumentos `stat=` realizará o gráfico a partir da frequência de cada fator da variável.

```{r,label="Frequência"}

iris%>%ggplot(aes(x=Species))+geom_bar()

```

Esse gráfico pode ser gerado com o `geom_col`. Porém nele é necessário realizar a contagem. Realizamos desta maneira: 

1. colocamos `iris` para delimitar o *data frame* em que vamos utilizar.

2. colocamos o `%>%`.

3. colocamos a função `group_by(Species)` para indicar que queremos que a contagemda frequência seje feita de acordo com os fatores da variável `Species`.

4. Acrescentamos o `%>%`novamente.

5. Utilizaremos a função `summarise()`, ela serve para fazer sumários de seus dados, como calcular média, mediana, desvio padrão, ou algum índice desejado. Neste caso utilizaremos o argumento `count=n()`, onde `n()`realizará a contagem que será armazenada na coluna `count`.

6. Utilizaremos o `%>%` mais uma vez para prosseguir com o ggplot

7. Nesse caso é necessário chamar a coluna recém criada com a frequência (a coluna `count`) para indicar o que vai no eixo y, 

```{r}
iris%>%group_by(Species)%>%summarise(count=n())%>%ggplot(aes(x=Species, fill=Species, y=count))+geom_col(color="black")
```

# Gráfico de pizza

Para o gráfico de pizza, iremos seguir uma linha de código semelhante que a anterior, porém para calcular porcentagem em `summarise` colocaremos `count=n()/150*100`, onde 150 é o total de observações do *data frame*. Neste caso o eixo x idicaremos com vazio `x= " "`. Para transformar o gráfico de barras em pizza adicionaresmo a função `coord_polar(theta="y")`. O `theme_void()` foi utilizado para remover o fundo do gráfico. Para colocar o números indicando a porcentagem utilizaremos o `geom_label(aes(label=count), position=position_stack(vjust=0.5), show.legend=FALSE)`. O `geom_label`é um comando que se utiliza de variáveis de um *data frame* para colocar "rótulos" no gráfico. Definimos dentro de `aes()` que o nosso `label` é `count`. No argumento `position=position_stack(vjust=0.5)`, definimos que a posição do nosso label será ajustada verticalmente por `vjust=0.5` na metade da altura da "fatia".

**Note:** que no segundo gráfico fizemos um ajuste em `count` onde utlizamos o comando `round(n()/150*100, 2)`, para arrendondar o valor do calculo da porcentagem para duas casas decimais.


```{r}
iris%>%group_by(Species)%>%summarise(count=n()/150*100)%>%ggplot(aes(x=" ", fill=Species, y=count))+geom_col(color="black")+coord_polar(theta="y")+theme_void()

iris%>%group_by(Species)%>%summarise(count=round(n()/150*100, 2))%>%ggplot(aes(x=" ", fill=Species, y=count))+geom_col(color="black")+coord_polar(theta="y")+ geom_label(aes(label = count),
             position = position_stack(vjust = 0.5),
             show.legend = FALSE)+theme_void()

```

# Gráfico de pontos

Para realizar gráficos de pontos é necessário indicar o eixo x e y em `aes()` e adicionar a função `geom_point()`

```{r}
ggplot(iris,aes(x=Sepal.Length, y=Sepal.Width))+geom_point()
```

Caso queria que os pontos fique de acordo com uma variável de seu *data frame*, é indicando através do argumento `color=`, a mesma coisa se aplica à `shape=`. Neste caso inicamos conforme a espécie (`Species`)

```{r}
ggplot(iris,aes(x=Sepal.Length, y=Sepal.Width, color=Species, shape=Species))+geom_point()
```

É possível adicionar a linha de tendência dos pontos através o `geom_smooth`, dentro dele colocamos alguns argumentos. `se=FALSE` é para não plotar o erro padrão na reta e `method="lm"` para que o método para desenhar a reta seje o modelo linear. 

```{r}

ggplot(iris,aes(x=Sepal.Length, y=Sepal.Width, color=Species, shape=Species))+geom_point()+geom_smooth(se=FALSE, method="lm")

```

Caso queria inverter o eixo x com o y, utiliza o comando `coord_flip`

```{r}

ggplot(iris,aes(x=Sepal.Length, y=Sepal.Width, color=Species, shape=Species))+geom_point()+geom_smooth(se=FALSE, method="lm")+coord_flip()

```

# Gráfico de barras (média e desvio)

Para fazer o gráfico da média com barras de desvio é um processo semenlhante ao gráfico de frequência, porém desta vez temos que summarizar `summarise` média, desvio padrão ou erro padrão. `mean=mean(Sepal.Length)` aqui foi calculado a média da variável `Sepel.Length` através da função `mean()` e armazenado na coluna `mean`. `sd=sd(Sepal.Length)` aqui foi calculado o desvio padrão através da função `sd()` e armazenado na coluna `sd`. `se=sd(Sepal.Length)/sqrt(length(Sepal.Length))` aqui foi calculado o erro padrão e armazenado na coluna `se`.

Em `aes()` tem que se colocar que o eixo y é igual a média `y=mean` e colocar `geom_col` para gerar o gráfico de colunas. Para acrescenta as barras de erros utilizamos o comando `geom_errobar()`, dele colocaremo a função `aes()` e delimitaremos os limites inferiores e superiores da barra `aes(ymin=mean-sd,ymax=mean+sd)`. O `ymin` é para delimitar o limite inferior, onde é a média menos o desvio padrão `mean-sd`. O `ymax` é para delimitar o limite superior, onde é a média mais o desvio padrão `mean+sd`. O parâmetro `width=0.5` é para definir a largura da barra do desvio.

**Obs.:** ao invés de utilizar o `sd` (desvio padrão), pode-se trocar por `se` para trabalhar com o erro padrão.

```{r,label="grafico de barras"}

iris%>%group_by(Species)%>%summarise(mean=mean(Sepal.Length), sd=sd(Sepal.Length),se=sd(Sepal.Length)/sqrt(length(Sepal.Length)))%>%ggplot(aes(x=Species, y=mean))+geom_col()+geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd), width=0.5)+labs(y="Comprimento da Sepala", x="Espécies")+theme_bw()+scale_y_continuous(limits=c(0,10))

```

O exemplo abaixo é uma opção utilizando o `geom_linerange` no lugar do `geom_errobar`.

```{r}
iris%>%group_by(Species)%>%summarise(mean=mean(Sepal.Length), sd=sd(Sepal.Length),se=sd(Sepal.Length)/sqrt(length(Sepal.Length)))%>%ggplot(aes(x=Species, y=mean))+geom_col()+geom_linerange(aes(ymin=mean-sd,ymax=mean+sd))+labs(y="Comprimento da Sepala", x="Espécies")+theme_bw()+scale_y_continuous(limits=c(0,10))
```

O exemplo abaixo é uma opção utilizando o `geom_pointrange` no lugar do `geom_errobar`.

 
```{r}
iris%>%group_by(Species)%>%summarise(mean=mean(Sepal.Length), sd=sd(Sepal.Length),se=sd(Sepal.Length)/sqrt(length(Sepal.Length)))%>%ggplot(aes(x=Species, y=mean))+geom_col()+geom_pointrange(aes(ymin=mean-sd,ymax=mean+sd))+labs(y="Comprimento da Sepala", x="Espécies")+theme_bw()+scale_y_continuous(limits=c(0,10))
```

O exemplo abaixo é sem a coluna, apenas o `geom_linerange`.

```{r}
iris%>%group_by(Species)%>%summarise(mean=mean(Sepal.Length), sd=sd(Sepal.Length),se=sd(Sepal.Length)/sqrt(length(Sepal.Length)))%>%ggplot(aes(x=Species, y=mean))+geom_linerange(aes(ymin=mean-sd,ymax=mean+sd))+labs(y="Comprimento da Sepala", x="Espécies")+theme_bw()+scale_y_continuous(limits=c(0,10))
```

# Alterando escalas, cores, fontes e temas 

## Ajustando escalas no ggplot

Retornamos com o gráfico de barra com a média e as barras de desvio. Para ajustar a escala de algum elemento gráfico no `ggplot` o comando inicia `scale_[parâmetro]_[característica do parâmetro ou tipo de função aplicada]()`. No caso abaixo foi utilizado o `scale_y_continuous()`, já que ajustaremos a escala do eixo y, sendo ela uma variável contínua. Dentro da função colocaremos o seguinte agumento `limits=c(0,10)`, onde zero é o limite inferior e o 10 o limite superior.

```{r,label="escala"}

iris%>%group_by(Species)%>%summarise(mean=mean(Sepal.Length), sd=sd(Sepal.Length),se=sd(Sepal.Length)/sqrt(length(Sepal.Length)))%>%ggplot(aes(x=Species, y=mean))+geom_col()+geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd), width=0.5)+labs(y="Comprimento da Sepala", x="Espécies")+theme_bw()+scale_y_continuous(limits=c(0,10))

#exemplo com a escala maior
iris%>%group_by(Species)%>%summarise(mean=mean(Sepal.Length), sd=sd(Sepal.Length),se=sd(Sepal.Length)/sqrt(length(Sepal.Length)))%>%ggplot(aes(x=Species, y=mean))+geom_col()+geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd), width=0.5)+labs(y="Comprimento da Sepala", x="Espécies")+theme_bw()+scale_y_continuous(limits=c(0,20))


```

## Ordenando variáveis ordinais no ggplot


Em um *data frame* podemos ter variáveis ordinais, que em uma visualização gráfica não faz sentido que elas não sejam apresentadas na ordem correta. Então usaremos o pacote `forcats` para isso. Aqui ire gerar um *data frame* hipotético da frequência da escolaridade dos entrevistados de uma pesquisa,

Nesse primeiro modelo, note que a escolaridade não está seguindo a sequência correta. Já que o R por padrão ordena por ordem alfabética.

```{r}
Escolaridade<-c(rep("Graduação", 42), rep("Médio", 30), rep("Fundamental", 20))
Escolaridade<-as.data.frame(Escolaridade)

Escolaridade%>%ggplot(aes(x=Escolaridade))+geom_bar()+labs(y="Frequência", x="Escolaridade")
```

Nesse próximo isso é corrigido pelo comando `mutate(Escolaridade=fct_relevel(Escolaridade,"Fundamental","Médio", "Graduação"))`. A função `mutate()` serve para fazer alterações no *data frame*, como mudar nome, ordem, características, entre outros. Dentro dela colocamos o argumento `Escolaridade=fct_relevel(Escolaridade,"Fundamental","Médio","Graduação")`, o `fct_relevel()` é a função que atua na reordenação, dentro dela colocamos `Escolaridade` pois é a que queremos ordenar, depois colocamos qual é a ordem que queremos `"Fundamental", "Médio", Graduação"`, e toda essa alteração será armazenado em `Escolaridade`. 


```{r}

Escolaridade%>%mutate(Escolaridade=fct_relevel(Escolaridade,"Fundamental","Médio", "Graduação"))%>%ggplot(aes(x=Escolaridade))+geom_bar()+labs(y="Frequência", x="Escolaridade")
```

## Mudando cores de preenchimento no ggplot

Uma das formas de acrescentar cor ao gráfico é adicionando o argumento `fill` dentro da função `aes()`. Indicará ao ggplot que você quer que as cores de preenchimentos do `ggplot` mude de acordo com alguma variável de seu *data frame*.


```{r, label="Box-plot1"}
#| echo: true

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()

```

**Há várias maneiras de fazer isso, irei demonstrar algumas ao longo da oficina.** 

Por exemplo na linha de código abaixo foi acrescentado o argumento `fill` dentro da função `geom_boxplot()`.Nesse argumento usei a função de contatenar (`c()`), para denominar as três cores desejadas para o gráfico. Note que os nomes das cores estão escritos entre aspas **""**. Ao invés de colocar nome de cores em inglês, pode-se colocar o código RGB hexadecimal da cor, como `#4287f5`.

Atenção se queremos que as cores sejam diferenciadas de acordo com algum fator, ou variável nominal de nosso data.frame, temos que indicar dentro do `aes()`. Como fill para mudar o preenchimento, colour para mudar o contorno, e shape para mudar formato (caso esteja trabalhando com gráficos possuem pontos).

**Note**: quando colocamos as cores escolhidas dentro da forma geométrica (geom_), não será gerado legenda.

```{r, label="Box-plot2"}
#| echo: true

iris%>%ggplot(aes(x=Species, y=Petal.Length))+geom_boxplot(fill=c("lightpink","lightgreen","lightblue"))

```

A outra forma é delimitar através da função `scale_fill_manual()`, esse comando serve para alterar os parâmetros de `fill`. Nele foi utilizado `values = c()` para concatenar as cores escolhidas.

```{r, label="Box-plot3"}
#| echo: true

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()+scale_fill_manual(values=c("#704c41","#41704f","#584170"))

```

## Mudando cores de contorno no ggplot

O mesmo processo poderia ser feito igual ao `fill`, porém utilizando o comando color. Esse paramêtro também pode ser utilizado para diferenciar algunciar algum fator do *data frame*, apenas colocando dentro do `aes(color="coluna do data.frame")`. Nesse caso  foi colocado dentro da função `geom_boxplot()`, e coloquei o contorno do boxplot na cor marrom.

```{r, label="Box-plot4"}
#| echo: true

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c("lightblue","lightgreen","lightpink"), color="brown")

```

## Alterando elementos textuais no ggplot

Os nomes dos eixos são alterados pela função labs, onde você indica qual elemento gráfico você quer renomear. Lembre-se: o nome que você quer renomear tem que estar entre aspas **" "**.

- **y** para alterar o título do eixo y.
- **x** para alterar o título do eixo x.
- **title** para alterar o título ou acrescentar um título.
- **subtitle** para alterar o subtítulo ou acrescentar um subtítulo.
- **fill** para alterar o título da legenda referente ao fator colocado no fill.
- **color** para alterar o título da legenda referente ao fator colocado no color.
- **shape** para alterar o título da legenda referente ao fator colocado no shape.
- **size** para alterar o título da legenda referente ao fator colocado no size.

```{r, label="Box-plot eixos"}

#| echo: true

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c("lightblue","lightgreen","lightpink"), color="brown")+labs(y="Comprimento de pétala", x="Espécies", title="Comparação de comprimento de pétalas", subtitle = "Banco de dados iris")

```

### Alterando a fonte

Para alterar o tipo fonte do gráficos é necessário usar o pacote `extrafont`. Abaixo estará os comandos para instalar o pacote e carrega-lo.

```{r}
#| output: false
# Instalando o pacote extrafont
install.packages("extrafont")

#Carregando o pacote extrafont
library(extrafont)

#Carregando as fontes presentes no computador
loadfonts(device="all")
```

Aqui alteramos as fontes através do comando `theme()` este comando altera elementos temáticos do gráfico, como por exemplo fontes, tamanhos, cor de fundo, entre outros. Neste exemplo colocamons o  argumento `text = element_text()`. Dentro dele vai alguns argumentos:

- **face** é para definir se a fonte estará em itálico (`"italic"`), negrito (`"bold"`) ou ambos (`"italic.bold"`)
- **family** é para definir se o tipo de fonte. Esse argumento pode ter variações de acordo com sistema operacional do computador. Em sistema windows pode-se utilizar `"TT Times New Roman"`, `"Arial"`, etc. Enquanto em sistemas Linux e MacOS estarão `"serif"`, `"mono"`, etc.
- **size** é para definir se o tamanho da fonte.

**Obs.:** esses elementos são importantes para garantir boa visualização gráfica e seguir padrões gráficos de publicações ou revistas.

```{r}
iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()+labs(y="Comprimento de pétala", x="Espécies")+theme(text = element_text(face="bold", family="serif"))

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()+labs(y="Comprimento de pétala", x="Espécies")+theme(text = element_text(face = "bold.italic", family="mono", size=16))

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()+labs(y="Comprimento de pétala", x="Espécies")+theme(text = element_text(face="italic"))
```

As vezes é necessário colocar nomes em itálico, como por exemplo nomes de espécies que estão no eixo x. Com isso dentro de `theme()` colocaremos o arguemento `axis.text.x = element_text(face="italic")` se referindo que estaremos trabalhando com o texto presente na escala do eixo x. Caso fosse no eixo y seria `axis.text.y`. Essa alteração também pode ser aplicada à outros parâmetros, como  `fill` e `color`. Trabalhando assim, podemos alterar a fonte apenas daquele parâmetro.

```{r}
iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()+labs(y="Comprimento de pétala", x="Espécies")+theme(axis.text.x = element_text(face="italic"))
``` 

A seguir há o exemplo de deixar o título em negrito com maior destaque, utilizando o argumento `plot.title = element_text(face="bold")`

```{r}
iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()+labs(y="Comprimento de pétala", x="Espécies", fill="Espécies", title="Aqui é o título")+theme(axis.text.x = element_text(face="italic"), plot.title = element_text(face="bold"))
```

### Manipulação da legenda

Caso queremos tirar a legenda ou alterar a posição da legenda, utilizaremos o argumento `legend.position =`:

- **"none"** para tirar a legenda

- **"top"** para a legenda ficar em cima

- **"bottom"** para a legenda ficar em baixo

- **"left"** para a legenda ficar na esquerda

- **"right"** para a legenda ficar na direita

```{r}
iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()+labs(y="Comprimento de pétala", x="Espécies", fill="Espécies", title="Aqui é o título")+theme(axis.text.x = element_text(face="italic"), plot.title = element_text(face="bold"), legend.position = "none")

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()+labs(y="Comprimento de pétala", x="Espécies", fill="Espécies", title="Aqui é o título")+theme(axis.text.x = element_text(face="italic"), plot.title = element_text(face="bold"), legend.position = "top")

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()+labs(y="Comprimento de pétala", x="Espécies", fill="Espécies", title="Aqui é o título")+theme(axis.text.x = element_text(face="italic"), plot.title = element_text(face="bold"), legend.position = "bottom")

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()+labs(y="Comprimento de pétala", x="Espécies", fill="Espécies", title="Aqui é o título")+theme(axis.text.x = element_text(face="italic"), plot.title = element_text(face="bold"), legend.position = "left", legend.text = element_text(face="italic"))
```

### Anotação em gráfico

Também é possível fazer anotações em gráficos no ggplot2, como colocar linhas  e anotações para destacar pontos interessantes.

No primeiro exemplo colocamos o `geom_text` para adicionar o texto. Os argumentos `x` e `y` são para delimitar onde vai ficar o nosso texto, `label` é para definir o que vai estar no texto (nunca se esqueça de colocar entre aspas `" "`). 

```{r}
iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()+labs(y="Comprimento de pétala", x="Espécies", fill="Espécies", title="Aqui é o título")+theme(axis.text.x = element_text(face="italic"), plot.title = element_text(face="bold"), legend.position = "left", legend.text = element_text(face="italic"))+ geom_text(x = 2.5, y = 4, label = "Ponto importante", color = "red", face="bold")
```

Aqui é um exemplo utilizando `annotate`, nele além de adicionar texto, você pode adicionar linhas. Como nesse caso colocamos uma linha vertical no gráfico utilizando o argumento `"vline"`. Para colocar uma linha na horizontal é `"hline"`. Para ser um texto se utiliza o argumento `"text"`.

```{r}
iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()+labs(y="Comprimento de pétala", x="Espécies", fill="Espécies", title="Aqui é o título")+theme(axis.text.x = element_text(face="italic"), plot.title = element_text(face="bold"), legend.position = "left", legend.text = element_text(face="italic"))+ geom_text(x = 2.5, y = 4, label = "Ponto importante", color = "red")+ annotate("vline", x = 2, xintercept = 2, linetype = "dashed", color = "blue")

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()+labs(y="Comprimento de pétala", x="Espécies", fill="Espécies", title="Aqui é o título")+theme(axis.text.x = element_text(face="italic"), plot.title = element_text(face="bold"), legend.position = "left", legend.text = element_text(face="italic"))+ geom_text(x = 2.5, y = 4, label = "Ponto importante", color = "red")+annotate("text", x = 1, y = 3.5, label = "outro ponto", color = "blue")


```

## Temas

O `ggplot2` por padrão dispõe de alguns temas para utilizar nos gráficos, adicionando `theme_`, aparece as sujestões disponíveis do pacote. Através do comando `theme()`, pode-se editar o tema ou criar temas novos.

Abaixo está os temas disponíveis do pacote `ggplot2`.

```{r, label="Box-plot tema"}
#| echo: true
#| fig-width: 9
#| fig-height: 12.5


default<-iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c("lightblue","lightgreen","lightpink"), color="black")+labs(y="Comprimento de pétala", x="Espécies", title="Default")

classic<-iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c("lightblue","lightgreen","lightpink"), color="black")+labs(y="Comprimento de pétala", x="Espécies", title="Classic")+theme_classic()

dark<-iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c("lightblue","lightgreen","lightpink"), color="black")+labs(y="Comprimento de pétala", x="Espécies", title="Dark")+theme_dark()

bw<-iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c("lightblue","lightgreen","lightpink"), color="black")+labs(y="Comprimento de pétala", x="Espécies", title="bw")+theme_bw()

minimal<-iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c("lightblue","lightgreen","lightpink"), color="black")+labs(y="Comprimento de pétala", x="Espécies", title="Minimal")+theme_minimal()

gray<-iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c("lightblue","lightgreen","lightpink"), color="black")+labs(y="Comprimento de pétala", x="Espécies", title="Gray")+theme_gray()

light<-iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c("lightblue","lightgreen","lightpink"), color="black")+labs(y="Comprimento de pétala", x="Espécies", title="Light")+theme_light()

linedraw<-iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c("lightblue","lightgreen","lightpink"), color="black")+labs(y="Comprimento de pétala", x="Espécies", title="Linedraw")+theme_linedraw()

void<-iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c("lightblue","lightgreen","lightpink"), color="black")+labs(y="Comprimento de pétala", x="Espécies", title="Void")+theme_void()

default+classic+dark+bw+minimal+gray+light+linedraw+void

```

# Unindo vários gráficos em uma imagem só

Em na seção do histograma vimos a função `facet_grid` ou `facet_wrap`, para ter gráficos separados de acordo a uma característica do *data frame*. Porém como colocamos ggplots lado a lado de diferentes *data frame* para uma única imagem? Há algumas opções, aqui irei mostrar utlizando o pacote `patchwork`,

1. Armazenar os ggplots em um objeto utilizando o comando `<-` ou `=`, como mostra o exemplo abaixo

2. Escrever os nomes do objetos colocar `+` entre eles


```{r}
#Criando ggplots
barra<-Escolaridade%>%mutate(Escolaridade=fct_relevel(Escolaridade,"Fundamental","Médio", "Graduação"))%>%ggplot(aes(x=Escolaridade))+geom_bar()+labs(y="Frequência", x="Escolaridade")
polígono<-iris%>%ggplot(aes(x=Sepal.Length))+geom_freqpoly()+labs(y="Frequência",x="Comprimento de Sépala")
boxplot<-iris%>%ggplot(aes(y=Sepal.Length, x=Species))+geom_boxplot()+labs(y="Comprimento de Sépala", x="Espécies")
pontos<-iris%>%ggplot(aes(x=Sepal.Length,y=Sepal.Width, color=Species))+geom_point()+labs(x="Comprimento de Sépala", y="Largura de Sépala", color="Espécies")

barra + polígono + boxplot + pontos


```

3. Também é possível utilizar diferêntes conformações utilizando elementos matemáticos, como `/` e `()`.

```{r}

(barra + polígono + boxplot)/ pontos

```


# Extra

## Mapas

No `ggplot2` também é possível trabalhar com mapas. Para isso temos que instalar o pacote `raster` e `sf`.
```{r}
#| echo: true
#| message: false
#| warning: false
#| output: false
#instalando o pacote raster e sf
install.packages("raster")
install.packages("sf")

#carregando o pacote raster e sf
library(raster)
library(sf)
```

Os dados referentes abaixo é a média da precipitação anual entre os anos 1970-2000 na cidade de Pelotas [@wordclim]. Os dados foram previamente recortados e trabalhados para esta oficina, aqui só realizaremos a plotagem do mapa pelo `ggplot`. 

```{r}
#| warning: false

# Importando dados
prec<-raster("pelprec.tiff")

pel<-read_sf("Pelotas/Pelotas.shp")

# Convertendo raster para data frame para o ggplot processar o dado
prec_df<-as.data.frame(prec, xy = TRUE, na.rm = TRUE)

head(prec_df)
```

Para plotar o mapa é necessário definir os seguintes parâmetros em `aes()`. `x=x` para definir a Longitude, `y=y` para definir a Latitude, e `fill=pelprec` para definir o gradiente de preenchimento do mapa, que neste caso é precipitação em Pelotas. E para gerar o gráfico é só adicionar o `geom_raster()`.

```{r}
ggplot(prec_df,aes(x=x,y=y,fill=pelprec))+geom_raster()
``` 

Aqui plotamos o raster com a borda na volta (o shapefile).

**Note:** que nesta situação colocamos o *data frame* e os `aes()` referentes do raster dentro do `geom_raster` e as informações referentes ao shapefil em `geom_sf`. Pois quando colocamos dentro de `ggplot()` indicamos que o *data frame* será global para as funções seguintes.

**Obs.:** em `scale_fill_gradient` e `scale_fill_gardientn` definimos as cores do gradiente.

```{r}
# Cores padrão
ggplot()+geom_raster(data=prec_df,aes(x=x,y=y,fill=pelprec))+geom_sf(data=pel,fill=NA, color="gray",linewidth=2, alpha=.01)+labs(title="Mapa da média anual da precipitação \n em Pelotas-RS entre 1970-2000", y="Latitude", x="Longitude", fill="Precipitação (mm)")+theme_bw()

ggplot()+geom_raster(data=prec_df,aes(x=x,y=y,fill=pelprec))+geom_sf(data=pel,fill=NA, color="gray",linewidth=2, alpha=.01)+labs(title="Mapa da média anual da precipitação \n em Pelotas-RS entre 1970-2000", y="Latitude", x="Longitude", fill="Precipitação (mm)")+theme_bw()+scale_fill_gradient(low="gray",high="blue")

ggplot()+geom_raster(data=prec_df,aes(x=x,y=y,fill=pelprec))+geom_sf(data=pel,fill=NA, color="gray",linewidth=2, alpha=.01)+labs(title="Mapa da média anual da precipitação \n em Pelotas-RS entre 1970-2000", y="Latitude", x="Longitude", fill="Precipitação (mm)")+theme_bw()+scale_fill_gradientn(colours = terrain.colors(10))
```

Recomenda-se utilizar a paleta de cores `viridis` para visualmente adequado para pessoas daltonicas.

```{r}
#| echo: true
#| output: false

#intalando pacote viridis
install.packages("viridis")
#carregando pacote viridis
library(viridis)
```

```{r}
ggplot()+geom_raster(data=prec_df,aes(x=x,y=y,fill=pelprec))+geom_sf(data=pel,fill=NA, color="gray",linewidth=2, alpha=.01)+labs(title="Mapa da média anual da precipitação \n em Pelotas-RS entre 1970-2000", y="Latitude", x="Longitude", fill="Precipitação (mm)")+theme_bw()+scale_fill_viridis()


```

## Temas divertidos

Além dos temas disponíveis pelo `ggplot` e temas que podem ser criados, a seguir há a demonstração de alguns temas disponíveis no pacote `ThemePark`. Nele contém temas inspirados na cultura pop, jogos e filmes.

```{r, label="theme park1"}
#| echo: true
#| output: false
install.packages("remotes")
remotes::install_github("MatthewBJane/ThemePark")
library(ThemePark)
```

```{r, label="theme park"}

#| echo: true

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c(lordoftherings_theme_colors["light"],lordoftherings_theme_colors["medium"],lordoftherings_theme_colors["dark"]))+labs(y="Comprimento de pétala", x="Espécies", title= "Tema Senhor dos Anéis")+theme_lordoftherings()

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c(barbie_theme_colors["light"],barbie_theme_colors["medium"],barbie_theme_colors["dark"]))+labs(y="Comprimento de pétala", x="Espécies", title= "Tema Barbie")+theme_barbie()

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c(zelda_theme_colors["light"],zelda_theme_colors["medium"],zelda_theme_colors["dark"]))+labs(y="Comprimento de pétala", x="Espécies", title= "Tema Zelda")+theme_zelda()

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c(simpsons_theme_colors["light"],simpsons_theme_colors["medium"],simpsons_theme_colors["dark"]))+labs(y="Comprimento de pétala", x="Espécies", title= "Tema Simpsons")+theme_simpsons()

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c(asteroid_city_theme_colors["light"],asteroid_city_theme_colors["medium"],asteroid_city_theme_colors["dark"]))+labs(y="Comprimento de pétala", x="Espécies", title= "Tema Asteroid city")+theme_asteroid_city()

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c(elf_theme_colors["light"],elf_theme_colors["medium"],elf_theme_colors["dark"]))+labs(y="Comprimento de pétala", x="Espécies", title= "Tema Elf")+theme_elf()

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c(friends_theme_colors["light"],friends_theme_colors["medium"],friends_theme_colors["dark"]))+labs(y="Comprimento de pétala", x="Espécies", title= "Tema Friends")+theme_friends()

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c(alien_theme_colors["light"],alien_theme_colors["medium"],alien_theme_colors["dark"]))+labs(y="Comprimento de pétala", x="Espécies", title= "Tema Alien")+theme_alien()

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c(starwars_theme_colors["light"],starwars_theme_colors["medium"],starwars_theme_colors["dark"]))+labs(y="Comprimento de pétala", x="Espécies", title= "Tema Star wars")+theme_starwars()

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c(snes_theme_colors["light"],snes_theme_colors["medium"],snes_theme_colors["dark"]))+labs(y="Comprimento de pétala", x="Espécies", title= "Tema SNES")+theme_snes()

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c(french_dispatch_theme_colors["light"],french_dispatch_theme_colors["medium"],french_dispatch_theme_colors["dark"]))+labs(y="Comprimento de pétala", x="Espécies", title= "Tema French Dispatch")+theme_french_dispatch()

```

## Gráficos interativos

Caso apenas o ggplot por si só não foi o suficiente. Temos uma forma de deixar os seus gráficos interativos através do pacote `plotly`, onde podemos passar o mouse e ver valores, dar zoom, entre outras coisas.

```{r, label="gráficos interativos1"}
#| echo: true
#| message: false
#| warning: false
#| output: false
#instalando plotly
install.packages("plotly")
#carregando plotly
library(plotly)
```

```{r}
#| warning: false
default<-iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c("lightblue","lightgreen","lightpink"), color="black")+labs(y="Comprimento de pétala", x="Espécies", title="Default")

ggplotly(default)

snes1<-ggplot()+geom_raster(data=prec_df,aes(x=x,y=y,fill=pelprec))+geom_sf(data=pel,fill=NA, color="gray",linewidth=2, alpha=.01)+labs(title="Mapa da média anual da precipitação \n em Pelotas-RS entre 1970-2000", y="Latitude", x="Longitude", fill="Precipitação (mm)")+theme_bw()+scale_fill_snes_b()

ggplotly(snes1)

```

## Gráficos animados

Também é possível criar gráficos animados para uma apresentação, através do pacote `gganimate`.

```{r, label="gráficos interativos"}
#| echo: true
#| message: false
#| warning: false
#| output: false
#instalando pacotes: gganimate,gapminder,gifski, av e magick
install.packages("gganimate")
install.packages("gapminder")
install.packages("gifski")
install.packages("av")
install.packages("magick")

#carregand os pacotes gganimate, gapminder, av, gifski e magick
library(gganimate)
library(gapminder)
library(av)
library(gifski)
library(magick)
```

```{r}

data("gapminder")

head(gapminder)
```

```{r}
ggplot(gapminder,aes(x=gdpPercap,y=lifeExp,color=country,size=pop))+geom_point(alpha=.7, show.legend = FALSE)+scale_colour_manual(values=country_colors)+facet_wrap(~continent)+scale_size(range=c(2,12))+scale_x_log10() + labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
  transition_time(year) +
  ease_aes('linear')+theme_light()

```

# Referências

:::{#refs}

:::