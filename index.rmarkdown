---
title: "Introdução ao ggplot2"
author: "Isadora Real"
bibliography: ref.bib
csl: abnt.csl
lightbox: auto
---

# Introdução

O `ggplot2` é um pacote de código aberto para a visualização gráfica de dados para a linguagem de programação R. Foi criada por Hadley Wickham em 2005 [@ggplot2], sendo uma implementação do livro `Grammar Graphics` de Leland Wilkison também lançado em 2005 [@wilkinson2011grammar].

Ele aborda que visualização gráfica dos dados pode ser divida em componentes semânticos, como escalas e camadas.

![ ](Gplot2_hex_logo.svg.png)

## Por que usar o ggplot2?

1. Alta costumização gráfica.

2. Alta diversidade de modelos de gráficos.

3. Integração com outros pacotes do tidyverse, como por exemplo `dplyr` [@dplyr], `forcats` [@forcats] e o `plotly`[@plotly].

4. Criação de gráficos a partir de camadas, podendo sobrepor diferentes gráficos.

## Como instalar o ggplot2?

```{r,label="cran"}
options(repos = c(CRAN = "https://cloud.r-project.org"))
```

```{r, label="instalando pacotes"}
#| echo: true
#| message: false
#| warning: false
#| output: false

#instalando pacote ggplot2
install.packages("ggplot2")

#instalando dplyr, forcats e patchwork
install.packages("dplyr")
install.packages("forcats")
install.packages("patchwork")
```

Para usar o `ggplot2` em seus scripts tem que carrega-lo

```{r, label="carregando pacotes"}
#| echo: true
#| message: false
#| warning: false
#| output: false

#Carregando o pacote ggplot2
library(ggplot2)

#Carregando dplyr, forcats e patchwork
library(dplyr)
library(forcats)
library(patchwork)
```

# Banco de dados *iris*

Para essa oficina será utilizado bancos de dados **iris**.

**iris** - é referente tamanho de pételas e sepalas de 3 espécies do gênero *Iris* do trabalho de Fisher em 1936 (*Iris setosa*,*Iris versicolor* e *Iris virginica*)

```{r, label="carregando banco de dados"}
#| echo: true
data(iris)

head(iris)
```

# Box-plot

1- escrevemos **iris** - para indicar qual banco de dados estamos trabalhando

2- usamos o simbolo de pipe `%>%` para indicar que função futura vai ser utilizada com esse banco de dados

3- usamos a função `ggplot()` para iniciar a criação de nosso gráfico

4- dentro da função `ggplot()` será inserido a função `aes()`, nela será definido os fatores estéticos (*aesthetic*) do gráfico. Como que variável vai estar no eixo x, eixo y, na cor de preenchimento, etc.

5- é usado o símbolo de "`+`" na sintaxe para acrescentar camadas e alterações no gráfico, como legendas e alteração na escala dos eixos.

6- sempre para gerar alguma forma "geométrica" no gráfico, como colunas, box-plots, curvas, texte, entre outras, será utilizado `geom_"forma geométrica"`, neste caso será utilizado o `geom_boxplot`

```{r,label="Box-plot simples1"}
#| echo: true

iris%>%ggplot(aes(x=Species, y=Petal.Length))+geom_boxplot()

```
**iris poderia estar dentro de ggplot, como o primeiro argumento da função, se a necessidade de usar *pipe* `%>%`, segue o exemplo abaixo **

Obs.: pode se indicar o *data frame* através de `data=iris` dentro da função `ggplot()`

```{r, label="Box-plot simples"}
#| echo: true

ggplot(iris,aes(x=Species, y=Petal.Length))+geom_boxplot()

```

# Gráfico violino

O gráfico violino é graficamente semelhante ao Box-plot, demonstrando a densidade dos dados na formade violino. Para utilizar essa forma é adicnoando a função `geom_violin`

```{r, label="violino"}
ggplot(iris, aes(x=Species,y=Sepal.Width, fill=Species))+geom_violin()

```

# Histograma

Para gerar histogramas iremos utilizar a função `geom_histogram`, e só colocaremos a variável 

```{r, label="histograma"}

ggplot(iris,aes(x=Sepal.Width))+geom_histogram(bins=10, color="black", fill="white")+labs(y="Frequência", x="Largura de Sépala")

ggplot(iris,aes(x=Sepal.Width))+geom_histogram(bins=11, color="black", fill="white")+labs(y="Frequência", x="Largura de Sépala")+scale_x_continuous(n.breaks = 11)

```

# Polígono

```{r, label="histograma1"}

ggplot(iris,aes(x=Sepal.Width))+geom_density(color="black", fill="white")+labs(y="Frequência", x="Largura de Sépala")

ggplot(iris,aes(x=Sepal.Width))+geom_freqpoly(bins=11, color="black")+labs(y="Frequência", x="Largura de Sépala")+scale_x_continuous(n.breaks = 11)

ggplot(iris,aes(x=Sepal.Width))+labs(y="Frequência", x="Largura de Sépala")+scale_x_continuous(n.breaks = 11)+geom_histogram(bins=11, color="black", fill="white")+geom_freqpoly(bins=11, color="blue")

ggplot(iris,aes(x=Sepal.Width))+labs(y="Frequência", x="Largura de Sépala")+scale_x_continuous(n.breaks = 11)+geom_histogram(bins=11, color="black", fill="white")+geom_freqpoly(bins=11, color="blue")+facet_grid(~Species)
```

# Gráfico de frequência

```{r,label="Frequência"}

iris%>%ggplot(aes(x=Species))+geom_bar()

iris%>%group_by(Species)%>%summarise(count=n())%>%ggplot(aes(x=" ", fill=Species, y=count))+geom_col(color="black")+coord_polar(theta="y")+ geom_label(aes(label = count),
             position = position_stack(vjust = 0.5),
             show.legend = FALSE)+theme_void()

```

# Gráfico de pontos

```{r}

ggplot(iris,aes(x=Sepal.Length, y=Sepal.Width, color=Species))+geom_point()

ggplot(iris,aes(x=Sepal.Length, y=Sepal.Width, color=Species))+geom_point()+geom_smooth(se=FALSE, method="lm")

ggplot(iris,aes(x=Sepal.Length, y=Sepal.Width, color=Species, shape=Species))+geom_point()+geom_smooth(se=FALSE, method="lm")

ggplot(iris,aes(x=Sepal.Length, y=Sepal.Width, color=Species, shape=Species))+geom_point()+geom_smooth(se=FALSE, method="lm")+coord_flip()

```

# Gráfico de barras (média e desvio)

```{r,label="grafico de barras"}

iris%>%group_by(Species)%>%summarise(mean=mean(Sepal.Length), sd=sd(Sepal.Length),se=sd(Sepal.Length)/sqrt(length(Sepal.Length)))%>%ggplot(aes(x=Species, y=mean))+geom_col()+geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd), width=0.5)+labs(y="Comprimento da Sepala", x="Espécies")+theme_bw()+scale_y_continuous(limits=c(0,10))


iris%>%group_by(Species)%>%summarise(mean=mean(Sepal.Length), sd=sd(Sepal.Length),se=sd(Sepal.Length)/sqrt(length(Sepal.Length)))%>%ggplot(aes(x=Species, y=mean))+geom_col()+geom_linerange(aes(ymin=mean-sd,ymax=mean+sd))+labs(y="Comprimento da Sepala", x="Espécies")+theme_bw()+scale_y_continuous(limits=c(0,10))

iris%>%group_by(Species)%>%summarise(mean=mean(Sepal.Length), sd=sd(Sepal.Length),se=sd(Sepal.Length)/sqrt(length(Sepal.Length)))%>%ggplot(aes(x=Species, y=mean))+geom_col()+geom_pointrange(aes(ymin=mean-sd,ymax=mean+sd))+labs(y="Comprimento da Sepala", x="Espécies")+theme_bw()+scale_y_continuous(limits=c(0,10))

iris%>%group_by(Species)%>%summarise(mean=mean(Sepal.Length), sd=sd(Sepal.Length),se=sd(Sepal.Length)/sqrt(length(Sepal.Length)))%>%ggplot(aes(x=Species, y=mean))+geom_linerange(aes(ymin=mean-sd,ymax=mean+sd))+labs(y="Comprimento da Sepala", x="Espécies")+theme_bw()+scale_y_continuous(limits=c(0,10))


```

# Alterando cores, fontes e temas 
## Mudando cores de preenchimento no ggplot

Uma das formas de acrescentar cor ao gráfico é adicionando o argumento `fill` dentro da função `aes()`. Indicará ao ggplot que você quer que as cores de preenchimentos do `ggplot` mude de acordo com alguma variável de seu *data frame*.


```{r, label="Box-plot1"}
#| echo: true

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()

```

**Há várias maneiras de fazer isso, irei demonstrar algumas ao longo da oficina.** 

Por exemplo na linha de código abaixo foi acrescentado o argumento `fill` dentro da função `geom_boxplot()`.Nesse argumento usei a função de contatenar (`c()`), para denominar as três cores desejadas para o gráfico. Note que os nomes das cores estão escritos entre aspas **""**. Ao invés de colocar nome de cores em inglês, pode-se colocar o código RGB hexadecimal da cor, como `#4287f5`.

Atenção se queremos que as cores sejam diferenciadas de acordo com algum fator, ou variável nominal de nosso data.frame, temos que indicar dentro do `aes()`. Como fill para mudar o preenchimento, colour para mudar o contorno, e shape para mudar formato (caso esteja trabalhando com gráficos possuem pontos).

**Note**: quando colocamos as cores escolhidas dentro da forma geométrica (geom_), não será gerado legenda.

```{r, label="Box-plot2"}
#| echo: true

iris%>%ggplot(aes(x=Species, y=Petal.Length))+geom_boxplot(fill=c("lightpink","lightgreen","lightblue"))

```

A outra forma é delimitar através da função `scale_fill_manual()`, esse comando serve para alterar os parâmetros de `fill`. Nele foi utilizado `values = c()` para concatenar as cores escolhidas.

```{r, label="Box-plot3"}
#| echo: true

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()+scale_fill_manual(values=c("#704c41","#41704f","#584170"))

```

## Mudando cores de contorno no ggplot

O mesmo processo poderia ser feito igual ao `fill`, porém utilizando o comando color. Esse paramêtro também pode ser utilizado para diferenciar algunciar algum fator do *data frame*, apenas colocando dentro do `aes(color="coluna do data.frame")`. Nesse caso  foi colocado dentro da função `geom_boxplot()`, e coloquei o contorno do boxplot na cor marrom.

```{r, label="Box-plot4"}
#| echo: true

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c("lightblue","lightgreen","lightpink"), color="brown")

```

## Alterando elementos textuais no ggplot

Os nomes dos eixos são alterados pela função labs, onde você indica qual elemento gráfico você quer renomear. Lembre-se: o nome que você quer renomear tem que estar entre aspas **" "**.

- **y** para alterar o título do eixo y.
- **x** para alterar o título do eixo x.
- **title** para alterar o título ou acrescentar um título.
- **subtitle** para alterar o subtítulo ou acrescentar um subtítulo.
- **fill** para alterar o título da legenda referente ao fator colocado no fill.
- **color** para alterar o título da legenda referente ao fator colocado no color.
- **shape** para alterar o título da legenda referente ao fator colocado no shape.
- **size** para alterar o título da legenda referente ao fator colocado no size.

```{r, label="Box-plot eixos"}

#| echo: true

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c("lightblue","lightgreen","lightpink"), color="brown")+labs(y="Comprimento de pétala", x="Espécies", title="Comparação de comprimento de pétalas", subtitle = "Banco de dados iris")

```

### Alterando a fonte

Para alterar o tipo fonte do gráficos é necessário usar o pacote `extrafont`. Abaixo estará os comandos para instalar o pacote e carrega-lo.

```{r}
#| output: false
# Instalando o pacote extrafont
install.packages("extrafont")

#Carregando o pacote extrafont
library(extrafont)

#Carregando as fontes presentes no computador
loadfonts(device="all")
```

Aqui alteramos as fontes através do comando `theme()` este comando altera elementos temáticos do gráfico, como por exemplo fontes, tamanhos, cor de fundo, entre outros. Neste exemplo colocamons o  argumento `text = element_text()`. Dentro dele vai alguns argumentos:

- **face** é para definir se a fonte estará em itálico (`"italic"`), negrito (`"bold"`) ou ambos (`"italic.bold"`)
- **family** é para definir se o tipo de fonte. Esse argumento pode ter variações de acordo com sistema operacional do computador. Em sistema windows pode-se utilizar `"TT Times New Roman"`, `"Arial"`, etc. Enquanto em sistemas Linux e MacOS estarão `"serif"`, `"mono"`, etc.
- **size** é para definir se o tamanho da fonte.

**Obs.:** esses elementos são importantes para garantir boa visualização gráfica e seguir padrões gráficos de publicações ou revistas.

```{r}
iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()+labs(y="Comprimento de pétala", x="Espécies")+theme(text = element_text(face="bold", family="serif"))

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()+labs(y="Comprimento de pétala", x="Espécies")+theme(text = element_text(face = "bold.italic", family="mono", size=16))

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()+labs(y="Comprimento de pétala", x="Espécies")+theme(text = element_text(face="italic"))
```

As vezes é necessário colocar nomes em itálico, como por exemplo nomes de espécies que estão no eixo x. Com isso dentro de `theme()` colocaremos o arguemento `axis.text.x = element_text(face="italic")` se referindo que estaremos trabalhando com o texto presente na escala do eixo x. Caso fosse no eixo y seria `axis.text.y`. Essa alteração também pode ser aplicada à outros parâmetros, como  `fill` e `color`. Trabalhando assim, podemos alterar a fonte apenas daquele parâmetro.

```{r}
iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()+labs(y="Comprimento de pétala", x="Espécies")+theme(axis.text.x = element_text(face="italic"))
``` 

A seguir há o exemplo de deixar o título em negrito com maior destaque, utilizando o argumento `plot.title = element_text(face="bold")`

```{r}
iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()+labs(y="Comprimento de pétala", x="Espécies", fill="Espécies", title="Aqui é o título")+theme(axis.text.x = element_text(face="italic"), plot.title = element_text(face="bold"))
```

### Manipulação da legenda

Caso queremos tirar a legenda ou alterar a posição da legenda, utilizaremos o argumento `legend.position =`:

- **"none"** para tirar a legenda

- **"top"** para a legenda ficar em cima

- **"bottom"** para a legenda ficar em baixo

- **"left"** para a legenda ficar na esquerda

- **"right"** para a legenda ficar na direita

```{r}
iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()+labs(y="Comprimento de pétala", x="Espécies", fill="Espécies", title="Aqui é o título")+theme(axis.text.x = element_text(face="italic"), plot.title = element_text(face="bold"), legend.position = "none")

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()+labs(y="Comprimento de pétala", x="Espécies", fill="Espécies", title="Aqui é o título")+theme(axis.text.x = element_text(face="italic"), plot.title = element_text(face="bold"), legend.position = "top")

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()+labs(y="Comprimento de pétala", x="Espécies", fill="Espécies", title="Aqui é o título")+theme(axis.text.x = element_text(face="italic"), plot.title = element_text(face="bold"), legend.position = "bottom")

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()+labs(y="Comprimento de pétala", x="Espécies", fill="Espécies", title="Aqui é o título")+theme(axis.text.x = element_text(face="italic"), plot.title = element_text(face="bold"), legend.position = "left", legend.text = element_text(face="italic"))
```

### Anotação me gráfico



```{r}
iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()+labs(y="Comprimento de pétala", x="Espécies", fill="Espécies", title="Aqui é o título")+theme(axis.text.x = element_text(face="italic"), plot.title = element_text(face="bold"), legend.position = "left", legend.text = element_text(face="italic"))+ geom_text(x = 2.5, y = 4, label = "Ponto importante", color = "red", face="bold")


iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()+labs(y="Comprimento de pétala", x="Espécies", fill="Espécies", title="Aqui é o título")+theme(axis.text.x = element_text(face="italic"), plot.title = element_text(face="bold"), legend.position = "left", legend.text = element_text(face="italic"))+ geom_text(x = 2.5, y = 4, label = "Ponto importante", color = "red")+ annotate("vline", x = 2, xintercept = 2, linetype = "dashed", color = "blue")

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot()+labs(y="Comprimento de pétala", x="Espécies", fill="Espécies", title="Aqui é o título")+theme(axis.text.x = element_text(face="italic"), plot.title = element_text(face="bold"), legend.position = "left", legend.text = element_text(face="italic"))+ geom_text(x = 2.5, y = 4, label = "Ponto importante", color = "red")+annotate("text", x = 1, y = 3.5, label = "outro ponto", color = "blue")


```

# Extra

## Mapas

```{r}
#| echo: true
#| message: false
#| warning: false
#| output: false
#instalando o pacote raster e sf
install.packages("raster")
install.packages("sf")

#carregando o pacote raster e sf
library(raster)
library(sf)
```

```{r}
#| warning: false
prec<-raster("pelprec.tiff")

pel<-read_sf("Pelotas/Pelotas.shp")
plot(pel)

prec_df<-as.data.frame(prec, xy = TRUE, na.rm = TRUE)

ggplot(prec_df,aes(x=x,y=y,fill=pelprec))+geom_raster()

ggplot()+geom_raster(data=prec_df,aes(x=x,y=y,fill=pelprec))+geom_sf(data=pel,fill=NA, color="gray",linewidth=2, alpha=.01)+labs(title="Mapa da média anual da precipitação \n em Pelotas-RS entre 1970-2000", y="Latitude", x="Longitude", fill="Precipitação (mm)")+theme_bw()

ggplot()+geom_raster(data=prec_df,aes(x=x,y=y,fill=pelprec))+geom_sf(data=pel,fill=NA, color="gray",linewidth=2, alpha=.01)+labs(title="Mapa da média anual da precipitação \n em Pelotas-RS entre 1970-2000", y="Latitude", x="Longitude", fill="Precipitação (mm)")+theme_bw()+scale_fill_gradient(low="gray",high="blue")

ggplot()+geom_raster(data=prec_df,aes(x=x,y=y,fill=pelprec))+geom_sf(data=pel,fill=NA, color="gray",linewidth=2, alpha=.01)+labs(title="Mapa da média anual da precipitação \n em Pelotas-RS entre 1970-2000", y="Latitude", x="Longitude", fill="Precipitação (mm)")+theme_bw()+scale_fill_gradientn(colours = terrain.colors(10))
```

```{r}
#| echo: true
#| output: false

#intalando pacote viridis
install.packages("viridis")
#carregando pacote viridis
library(viridis)
```

```{r}
ggplot()+geom_raster(data=prec_df,aes(x=x,y=y,fill=pelprec))+geom_sf(data=pel,fill=NA, color="gray",linewidth=2, alpha=.01)+labs(title="Mapa da média anual da precipitação \n em Pelotas-RS entre 1970-2000", y="Latitude", x="Longitude", fill="Precipitação (mm)")+theme_bw()+scale_fill_viridis()


```

## Temas divertidos

```{r, label="theme park1"}
#| echo: true
#| output: false
install.packages("remotes")
remotes::install_github("MatthewBJane/ThemePark")
library(ThemePark)
```

```{r, label="theme park"}

#| echo: true

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c(lordoftherings_theme_colors["light"],lordoftherings_theme_colors["medium"],lordoftherings_theme_colors["dark"]))+labs(y="Comprimento de pétala", x="Espécies", title= "Tema Senhor dos Anéis")+theme_lordoftherings()

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c(barbie_theme_colors["light"],barbie_theme_colors["medium"],barbie_theme_colors["dark"]))+labs(y="Comprimento de pétala", x="Espécies", title= "Tema Barbie")+theme_barbie()

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c(zelda_theme_colors["light"],zelda_theme_colors["medium"],zelda_theme_colors["dark"]))+labs(y="Comprimento de pétala", x="Espécies", title= "Tema Zelda")+theme_zelda()

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c(simpsons_theme_colors["light"],simpsons_theme_colors["medium"],simpsons_theme_colors["dark"]))+labs(y="Comprimento de pétala", x="Espécies", title= "Tema Simpsons")+theme_simpsons()

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c(asteroid_city_theme_colors["light"],asteroid_city_theme_colors["medium"],asteroid_city_theme_colors["dark"]))+labs(y="Comprimento de pétala", x="Espécies", title= "Tema Asteroid city")+theme_asteroid_city()

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c(elf_theme_colors["light"],elf_theme_colors["medium"],elf_theme_colors["dark"]))+labs(y="Comprimento de pétala", x="Espécies", title= "Tema Elf")+theme_elf()

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c(friends_theme_colors["light"],friends_theme_colors["medium"],friends_theme_colors["dark"]))+labs(y="Comprimento de pétala", x="Espécies", title= "Tema Friends")+theme_friends()

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c(alien_theme_colors["light"],alien_theme_colors["medium"],alien_theme_colors["dark"]))+labs(y="Comprimento de pétala", x="Espécies", title= "Tema Alien")+theme_alien()

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c(starwars_theme_colors["light"],starwars_theme_colors["medium"],starwars_theme_colors["dark"]))+labs(y="Comprimento de pétala", x="Espécies", title= "Tema Star wars")+theme_starwars()

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c(snes_theme_colors["light"],snes_theme_colors["medium"],snes_theme_colors["dark"]))+labs(y="Comprimento de pétala", x="Espécies", title= "Tema SNES")+theme_snes()

iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c(french_dispatch_theme_colors["light"],french_dispatch_theme_colors["medium"],french_dispatch_theme_colors["dark"]))+labs(y="Comprimento de pétala", x="Espécies", title= "Tema French Dispatch")+theme_french_dispatch()

```

## Gráficos interativos

```{r, label="gráficos interativos1"}
#| echo: true
#| message: false
#| warning: false
#| output: false
#instalando plotly
install.packages("plotly")
#carregando plotly
library(plotly)
```

```{r}
#| warning: false
default<-iris%>%ggplot(aes(x=Species, y=Petal.Length, fill=Species))+geom_boxplot(fill=c("lightblue","lightgreen","lightpink"), color="black")+labs(y="Comprimento de pétala", x="Espécies", title="Default")

ggplotly(default)

snes1<-ggplot()+geom_raster(data=prec_df,aes(x=x,y=y,fill=pelprec))+geom_sf(data=pel,fill=NA, color="gray",linewidth=2, alpha=.01)+labs(title="Mapa da média anual da precipitação \n em Pelotas-RS entre 1970-2000", y="Latitude", x="Longitude", fill="Precipitação (mm)")+theme_bw()+scale_fill_snes_b()

ggplotly(snes1)

```

## Gráficos animados

```{r, label="gráficos interativos"}
#| echo: true
#| message: false
#| warning: false
#| output: false
#instalando pacotes: gganimate,gapminder,gifski, av e magick
install.packages("gganimate")
install.packages("gapminder")
install.packages("gifski")
install.packages("av")
install.packages("magick")

#carregand os pacotes gganimate, gapminder, av, gifski e magick
library(gganimate)
library(gapminder)
library(av)
library(gifski)
library(magick)
```

```{r}

data("gapminder")

head(gapminder)
```

```{r}
ggplot(gapminder,aes(x=gdpPercap,y=lifeExp,color=country,size=pop))+geom_point(alpha=.7, show.legend = FALSE)+scale_colour_manual(values=country_colors)+facet_wrap(~continent)+scale_size(range=c(2,12))+scale_x_log10() + labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
  transition_time(year) +
  ease_aes('linear')+theme_light()

```

# Referências

:::{#refs}

:::
